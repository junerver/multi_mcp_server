package ${packageName}.controller;

import java.util.List;

import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.jkr.framework.aspectj.lang.annotation.Log;
import com.jkr.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.jkr.framework.web.controller.BaseController;
import com.jkr.common.utils.poi.ExcelUtil;
import com.jkr.framework.web.domain.R;
###if($table.crud || $table.sub)
import com.jkr.framework.web.page.TableDataInfo;
###elseif($table.tree)
###end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {
    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
##    #if($table.crud || $table.sub)
    public R<TableDataInfo> list(${ClassName} ${className}) {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return getDataTable(list);
    }
##    #elseif($table.tree)
##        public R<List<${ClassName}>> list(${ClassName} ${className}) {
##            return R.success(${className}Service.select${ClassName}List(${className}));
##        }
##    #end

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "导出${functionName}列表", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public R<Void> export(HttpServletResponse response, ${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}数据");
        return R.success();
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/info/{${pkColumn.javaField}}")
    public R<${ClassName}> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.success(${className}Service.select${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "新增${functionName}", businessType = BusinessType.INSERT)
    @PostMapping(value = "/add")
    public R<Void> add(@Validated @RequestBody ${ClassName} ${className}) {
        return R.result(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "修改${functionName}", businessType = BusinessType.UPDATE)
    @PostMapping(value = "/edit")
    public R<Void> edit(@Validated @RequestBody ${ClassName} ${className}) {
        return R.result(${className}Service.update${ClassName}(${className}));
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "删除${functionName}", businessType = BusinessType.DELETE)
    @PostMapping("/remove/{${pkColumn.javaField}}")
    public R<Void> remove(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.result(${className}Service.delete${ClassName}By${pkColumn.capJavaField}(${pkColumn.javaField}));
    }

    /**
     * 批量删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:batchRemove')")
    @Log(title = "批量删除${functionName}", businessType = BusinessType.DELETE)
    @PostMapping("/batchRemove")
    public R<Void> batchRemove(@RequestBody ${ClassName} ${className}) {
        return R.result(${className}Service.delete${ClassName}ByIds(${className}.getIds()));
    }
}
